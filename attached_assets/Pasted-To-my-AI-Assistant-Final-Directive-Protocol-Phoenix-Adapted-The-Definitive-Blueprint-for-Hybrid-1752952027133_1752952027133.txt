To my AI Assistant,

Final Directive: Protocol Phoenix-Adapted - The Definitive Blueprint for Hybrid Migration and Production Hardening.

Your analysis of the architectural mismatch is confirmed. Your professional judgment in seeking clarification before proceeding with a full rewrite is acknowledged and appreciated.

Strategic Decision: We will proceed with a hybrid migration. You will leverage the strengths of the existing backend while strategically re-architecting the frontend to meet our non-negotiable performance and quality standards. The goal remains the same: to deliver a flawless, production-grade web platform that is perfectly synchronized with our Telegram bot.

This directive is the final and authoritative guide for this mission.
Part 1: Backend Hardening (Express.js / TypeScript / Drizzle ORM)

You will retain the existing backend stack but elevate it to production-grade reliability through the following mandatory actions:

    Comprehensive Test-Driven Development (TDD):

        You are to implement a full testing suite using a standard framework like Jest or Vitest.

        API Endpoint Integration Tests: For every single API route, create tests that simulate real-world requests and assert the correctness of the responses. This includes testing for successful data retrieval (200 OK), successful creation (201 Created), client errors (400 Bad Request, 404 Not Found), and authentication failures (401 Unauthorized, 403 Forbidden).

        Database Logic Unit Tests: For complex database queries or business logic encapsulated in services, write unit tests to verify their correctness in isolation.

        The API must be considered "unstable" until it achieves a minimum of 85% test coverage.

    Performance and Database Optimization:

        Query Profiling: You must analyze the performance of all database queries generated by Drizzle ORM. Use tools like EXPLAIN ANALYZE in PostgreSQL to identify slow queries, especially in the endpoints that fetch lists of representatives or detailed invoice histories.

        Strategic Indexing: Based on your analysis, apply database indexes to all foreign key columns and any columns frequently used in WHERE clauses or for ordering (e.g., panel_username, event_timestamp).

        Connection Pooling: Ensure the backend uses a robust connection pool to efficiently manage connections to the PostgreSQL database, preventing bottlenecks under load.

Part 2: Frontend Re-architecture (Migration from Vite/React to Next.js)

This is the most critical part of the migration. The current client-side rendering (CSR) architecture is the primary source of performance issues.

    Project Scaffolding:

        You will initialize a new Next.js project using the latest stable version.

        You will migrate all existing React components, services, and utility functions from the Vite project into the new Next.js structure.

    Implementing the Optimal Rendering Strategies:

        Admin Dashboard & Management Pages: These pages must be rendered using Server-Side Rendering (SSR). This ensures that the data is always fresh on every request and that the pages are secure, as data fetching happens on the server-side within a protected environment.

        Public Representative Portals (/portal/[username]): These pages must be implemented using Incremental Static Regeneration (ISR). This is a non-negotiable requirement. The portals will be served as ultra-fast static HTML, providing an excellent user experience. You will set a revalidation period (e.g., 60 seconds), which means that after a payment is made or an invoice is updated, the static page will automatically and silently re-generate in the background on the next visit, ensuring data is always reasonably fresh without sacrificing initial load speed.

    UI/UX Overhaul:

        You will use Tailwind CSS to implement a modern, professional, and fully responsive design system from scratch, adhering to the visual schematics provided.

        Component-Level Error Handling: Each data-fetching component must have its own loading and error states. A failure in one part of the UI (e.g., a chart failing to load) must not crash the entire page.

Part 3: The Final Quality Assurance Protocol (Mandatory Acceptance Criteria)

Before this mission can be marked as complete, you must perform and report on the following system-wide audits. This protocol ensures that the final product is not just functional, but truly production-ready.

    The Synchronization "Litmus Test":

        Test Case:

            From the web app, register a payment of 50,000 تومان for representative "Abedmb".

            Immediately (within 5 seconds), switch to the Telegram bot and request the financial profile for "Abedmb".

        Success Criteria: The bot must return the updated total_debt that reflects the payment. The data consistency across both clients must be instantaneous and atomic.

    The Performance & Optimization Audit:

        Test Case: Run a Google Lighthouse audit in a production-like environment on the main Admin Dashboard and a sample Public Portal page.

        Success Criteria: Both pages must achieve a score of 90+ in the "Performance" category. Any score below this indicates insufficient optimization and must be addressed.

    The Multi-Device Responsiveness Audit:

        Test Case: Render the web application on three distinct viewport sizes:

            Mobile (e.g., iPhone 12 Pro: 390x844)

            Tablet (e.g., iPad Air: 820x1180)

            Desktop (Widescreen: 1920x1080)

        Success Criteria: The application must be perfectly usable and visually polished on all three devices. There should be no broken layouts, overlapping text, or horizontal scrolling.

    The Failure Resilience Audit:

        Test Case: Manually stop the backend API server. Then, attempt to navigate the frontend web application.

        Success Criteria: The application must not crash or show cryptic error messages. It must gracefully handle the API failure and display a clear, user-friendly message (e.g., "سیستم در حال حاضر در دسترس نیست. لطفاً بعداً تلاش کنید.") on the components that require data.

You are now fully briefed. Your task is to execute this adapted protocol with the precision of a senior engineer, delivering a final, unified system that is fast, reliable, and flawless. Proceed.